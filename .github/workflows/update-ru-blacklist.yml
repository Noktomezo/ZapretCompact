name: Update RU Blacklist
on:
  schedule:
    - cron: "5 3,9,15,21 * * *"
  workflow_dispatch:
jobs:
  update-blacklist:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Make script executable
        run: chmod +x ./scripts/update-ru-blacklist.sh

      - name: Run update blacklist script
        run: ./scripts/update-ru-blacklist.sh

      - name: Commit and push if changed
        id: commit_changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git remote set-url origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes detected"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, committing and pushing"

            if git diff --staged --name-only | grep -q "hosts/russia-blocked-ipset.txt"; then
              ADDED=$(git diff --staged hosts/russia-blocked-ipset.txt | grep "^+" | grep -v "^+++" | wc -l)
              REMOVED=$(git diff --staged hosts/russia-blocked-ipset.txt | grep "^-" | grep -v "^---" | wc -l)
              echo "diff_added=$ADDED" >> $GITHUB_OUTPUT
              echo "diff_removed=$REMOVED" >> $GITHUB_OUTPUT
            else
              echo "diff_added=0" >> $GITHUB_OUTPUT
              echo "diff_removed=0" >> $GITHUB_OUTPUT
            fi

            git commit -m "chore: update blacklist"
            git pull --rebase
            git push -f -u origin HEAD:${{ github.ref }}
            echo "changes_made=true" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup releases
        if: steps.commit_changes.outputs.changes_made == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list \
            | awk -F '\t' '{print $3}' \
            | while read -r line; do
              gh release delete --cleanup-tag -y "$line"
            done

      - name: Create release archive
        if: steps.commit_changes.outputs.changes_made == 'true'
        run: |
          set -euo pipefail

          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          RELEASE_DATE=$(TZ="Europe/Moscow" date +"%d.%m.%Y %H:%M")
          ARCHIVE_NAME="${REPO_NAME}.zip"
          RELEASE_NAME="${REPO_NAME} [${RELEASE_DATE}]"
          TMP_PARENT_DIR=$(mktemp -d)
          TMP_DIR="$TMP_PARENT_DIR/$REPO_NAME"

          trap 'rm -rf "$TMP_PARENT_DIR"' EXIT

          mkdir -p "$TMP_DIR"

          cp -a files "$TMP_DIR/" 2>/dev/null || true
          cp -a hosts "$TMP_DIR/" 2>/dev/null || true
          cp -a scripts "$TMP_DIR/" 2>/dev/null || true
          cp -a service-install.cmd "$TMP_DIR/" 2>/dev/null || true
          cp -a service-remove.cmd "$TMP_DIR/" 2>/dev/null || true
          cp -a start.cmd "$TMP_DIR/" 2>/dev/null || true

          (cd "$TMP_PARENT_DIR" && zip -r "../$ARCHIVE_NAME" "$REPO_NAME")

          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_ENV
          echo "RELEASE_TAG=v$(TZ="Europe/Moscow" date +"%d.%m.%Y-%H%M")" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: steps.commit_changes.outputs.changes_made == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_NOTES="‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ \`$RELEASE_DATE\`"

          ADDED="${{ steps.commit_changes.outputs.diff_added }}"
          REMOVED="${{ steps.commit_changes.outputs.diff_removed }}"

          if [[ "$ADDED" -gt 0 || "$REMOVED" -gt 0 ]]; then
            RELEASE_NOTES="$RELEASE_NOTES

            üü¢ –î–æ–±–∞–≤–ª–µ–Ω–æ \`$ADDED\`
            üî¥ –£–¥–∞–ª–µ–Ω–æ \`$REMOVED\`"
          fi

          gh release create "$RELEASE_TAG" "$ARCHIVE_NAME" \
            --title "$RELEASE_NAME" \
            --notes "$RELEASE_NOTES" \
            --latest
